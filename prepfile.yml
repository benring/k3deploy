---
#  K3 File Prep play
#	1. Split source file into segments
#	2. Copies each group of files to target machines
#	3. Clean up source segements in source folder
#
#	NOTE: File names are re-numberred on target machines. Each set is ordered 0..numProcs

- hosts:  source_hosts

  tasks:
  - name: Split source file into partitions
    command: chdir={{source|dirname}} split -n l/{{ numProcs*groups['target_hosts']|length }} --numeric-suffixes -a 3 {{source|basename }} {{source|basename }}


- hosts: target_hosts

  sudo: True

  tasks:
  # Define Constants
  - name: Build the peers string
    set_fact:
      peers: "[ {%- for key in play_hosts -%} {% for i in range(numProcs) %} {addr: <{{ hostvars[key].ip }}:{{40000 + i}}> }{%- if not loop.last %},{% endif %} {%- endfor %} {%- if not loop.last %},{% endif %}{%- endfor %}]"
      setup_dir: /tmp/k3_{{app_name}}/setup/
      data_dir: /tmp/k3_{{app_name}}/data/
      docker_image: k3_{{app_name}}
      results_dir: /tmp/k3_results/k3_{{app_name}} # Local side. 

  # Copy over files
  - name: Create data dir, if needed
    file: dest={{destination}} state=directory mode=775 group=damsl

  - name: Copy files to destination machines
    copy: src={{source}}{{ "%03d" | format(item|int)}} dest={{destination}}/{{source|basename }}{{ "%03d" | format(item|int)}}
    with_sequence: start=0 end={{((numProcs)*groups['target_hosts']|length)-1}} 
    when: ((item | int) // (numProcs|int)) == peer

  - name: Setup directories on the remote host
    shell: mkdir -p {{setup_dir}} {{data_dir}}{{item}}
    with_sequence: start=40000 end={{40000+numProcs-1 }}

  - name: Copy the binary to the remote host
    copy: src={{binary}} dest={{setup_dir}}k3
  
  - name: Copy the Dockerfile to the remote host
    copy: src=Dockerfile dest={{setup_dir}}
  
  - name: Copy the run script to the remote host
    copy: src=run_k3.sh dest={{setup_dir}}
 

  # Docker Cleanup
  - name: Kill existing Docker containers for this app
    docker: name="{{docker_image}}_{{item}}" image={{docker_image}} state=killed
    ignore_errors: yes
    with_sequence: start=40000 end={{40000+numProcs-1}}

  - name: Remove existing Docker containers for this app
    shell: docker rm -f {{docker_image}}_{{item}} 
    ignore_errors: yes
    with_sequence: start=40000 end={{40000+numProcs-1}}

  - name: Delete existing Docker image for this app
    docker_image: name={{docker_image}} state=absent
    ignore_errors: yes

  # Docker build
  - name: Build the Docker image for this app
    shell: docker build -t {{docker_image}} {{setup_dir}}
 
  - name: Run the binary in a docker container
    shell: docker run -d --net=host --name="{{docker_image}}_{{40000 + (item|int)}}" -v {{data_dir}}{{40000 + (item|int)}}:/app_data -v /local:/local {{docker_image}} run_k3 -p 'peers:{{peers}},me:<{{ip}}:{{40000 + (item|int)}}>,{% for key, value in k3_bindings.iteritems()|list -%}{{key}}:{{value}}{% if not loop.last %},{% endif %} {%- endfor %}, rankings_file:"{{destination}}/{{source|basename}}{{"%03d" | format(item|int)}}"'
    with_sequence: start=0 end={{numProcs-1}}
 
  - name: Block until all containers have completed 
    command: docker wait {{docker_image}}_{{item}}
    with_sequence: start=40000 end={{40000+numProcs-1}}

  - name: Create local directories for the results
    local_action: shell mkdir -p {{results_dir}}
    sudo: no
    
  - name: Retreive the results from each host
    sudo: no 
    synchronize: mode=pull src={{data_dir}}  dest={{results_dir}}/{{ip}}

  - name: Cleanup remote folders
    shell: rm -rf {{data_dir}} {{setup_dir}}
    with_sequence: start=0 end={{numProcs-1}}


- hosts: source_hosts

  tasks:
  - name: Clean up source file segments
    command: rm -f {{source}}{{item}}
    with_sequence: start=0 end={{((numProcs)*groups['target_hosts']|length)-1}} format=%03d
